# üìÅ app.py ‚Äî –ø–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ Whisper, GPT, OpenAI TTS —ñ –≤—Å—ñ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏

from flask import Flask, request, jsonify, render_template, session, redirect, url_for
from flask_cors import CORS
import openai
from openai import OpenAI  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
import os
import json
import time
from datetime import datetime
from dotenv import load_dotenv
from utils.auth import is_logged_in, require_login, ADMIN_USERNAME, ADMIN_PASSWORD
from utils.vector_store import search_knowledgebase
from utils.products import get_product_info, add_product, list_all_products
from utils.calendar import create_calendar_event, list_calendar_events, find_free_slots
from config import OPENAI_API_KEY, OPENAI_ORG_ID, ASSISTANT_ID, FLASK_SECRET_KEY, DIALOGUES_FILE, openai_client_settings
from urllib.parse import quote

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI
client = None
try:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ config
    client = OpenAI(**openai_client_settings)
    print("‚úì OpenAI –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    models = client.models.list()
    print(f"‚úì –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API. –î–æ—Å—Ç—É–ø–Ω—ã {len(models.data)} –º–æ–¥–µ–ª–µ–π")
    
    # –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–¥—É–ª—å openai –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    openai.api_key = OPENAI_API_KEY
    if OPENAI_ORG_ID:
        openai.organization = OPENAI_ORG_ID
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    openai.client = client
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")

app = Flask(__name__)
app.secret_key = FLASK_SECRET_KEY  # Use the value from config
CORS(app)

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
if os.path.exists(DIALOGUES_FILE):
    with open(DIALOGUES_FILE, "r", encoding="utf-8-sig") as f:
        dialogues = json.load(f)
else:
    dialogues = {}

def get_lang():
    lang = request.cookies.get("site_lang", "uk")
    return lang if lang in ["uk", "en", "de"] else "uk"

def t(name, **kwargs):
    lang = get_lang()
    template = f"{name}.html" if lang == "uk" else f"{name}_{lang}.html"
    return render_template(template, **kwargs)

@app.route("/")
def index():
    return t("index")

@app.route("/privacy")
def privacy():
    return t("privacy")

@app.route("/impressum")
def impressum():
    return t("impressum")

@app.route("/contact")
def contact():
    return t("contact")

@app.route("/dashboard")
@require_login
def dashboard():
    return t("dashboard", dialogues=dialogues)

@app.route("/instructions", methods=["GET", "POST"])
@require_login
def instructions():
    instruction_file = "storage/instructions.txt"
    content = ""
    message = None
    if request.method == "POST":
        content = request.form.get("instructions", "")
        with open(instruction_file, "w", encoding="utf-8") as f:
            f.write(content)
        message = {
            "uk": "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
            "en": "Instructions updated successfully!",
            "de": "Anweisungen erfolgreich gespeichert!"
        }.get(get_lang(), "Done")
    elif os.path.exists(instruction_file):
        with open(instruction_file, "r", encoding="utf-8") as f:
            content = f.read()
    return t("instructions", content=content, message=message)

@app.route("/upload_knowledge", methods=["GET", "POST"])
@require_login
def upload_knowledge():
    message = None
    if request.method == "POST":
        file = request.files.get("file")
        if file:
            filename = file.filename
            file.save(os.path.join("storage", "knowledgebase", filename))
            message = {
                "uk": f"–§–∞–π–ª '{filename}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!",
                "en": f"File '{filename}' uploaded successfully!",
                "de": f"Datei '{filename}' erfolgreich hochgeladen!"
            }.get(get_lang(), "Done")
    return t("upload_knowledge", message=message)

@app.route("/set_widget_settings", methods=["POST"])
@require_login
def set_widget_settings():
    settings = {
        "interaction_mode": request.form.get("interaction_mode", "voice+chat"),
        "button": {
            "text": request.form.get("btn_text", "üé§"),
            "color": request.form.get("btn_color", "#ffffff"),
            "background": request.form.get("btn_bg", "#4CAF50"),
            "size": request.form.get("btn_size", "60px"),
            "position": request.form.get("btn_position", "bottom-right")
        }
    }
    with open("static/widget_settings.json", "w", encoding="utf-8") as f:
        json.dump(settings, f, indent=2, ensure_ascii=False)
    return redirect(url_for("dashboard"))

@app.route("/login", methods=["GET", "POST"])
def login():
    error = None
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
            session["logged_in"] = True
            return redirect(url_for("dashboard"))
        else:
            error = {
                "uk": "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å",
                "en": "Invalid username or password",
                "de": "Falscher Benutzername oder Passwort"
            }.get(get_lang(), "Login failed")
    return t("login", error=error)

@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))

@app.route("/process_audio", methods=["POST"])
def process_audio():
    try:
        audio_file = request.files.get("audio")
        client_id = request.form.get("client_id", "unknown")
        if not audio_file:
            return jsonify({"error": "–ê—É–¥—ñ–æ—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 400

        temp_filename = "temp_audio.webm"
        audio_file.save(temp_filename)
        with open(temp_filename, "rb") as f:
            transcription = openai.audio.transcriptions.create(
                model="whisper-1",
                file=f,
                response_format="json"
            )
        os.remove(temp_filename)

        # Get the transcribed text
        text = transcription.text
        
        # Check if the text contains product or calendar related keywords
        text_lower = text.lower()
        
        # Handle product-related queries directly
        if any(keyword in text_lower for keyword in ["—Ç–æ–≤–∞—Ä", "–ø—Ä–æ–¥—É–∫—Ç", "—Å–∫–ª–∞–¥", "—ñ–Ω–≤–µ–Ω—Ç–∞—Ä", "–Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]):
            try:
                if "—Å–ø–∏—Å–æ–∫" in text_lower or "–≤—Å—ñ" in text_lower:
                    reply = list_all_products()
                else:
                    # Try to extract product name
                    import re
                    product_match = re.search(r'(?:—Ç–æ–≤–∞—Ä|–ø—Ä–æ–¥—É–∫—Ç|–Ω–∞—è–≤–Ω—ñ—Å—Ç—å)\s+[""]?([^""]+)[""]?', text_lower)
                    if product_match:
                        product_name = product_match.group(1).strip()
                        reply = get_product_info(product_name)
                    else:
                        # If no specific product mentioned, list all products
                        reply = list_all_products()
            except Exception as e:
                print(f"Error handling product query: {e}")
                reply = f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –±–∞–∑–æ—é —Ç–æ–≤–∞—Ä—ñ–≤: {str(e)}"
        
        # Handle calendar-related queries directly
        elif any(keyword in text_lower for keyword in ["–∫–∞–ª–µ–Ω–¥–∞—Ä", "–∑–∞–ø–∏—Å", "–ø—Ä–∏–π–æ–º", "–≤—ñ–ª—å–Ω—ñ", "—Å–ª–æ—Ç–∏", "–≤—Å—Ç—Ä–µ—á–∞", "–≤—Å—Ç—Ä–µ—á—É", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"]):
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é
            site_url = request.host_url.rstrip('/')
            booking_url = f"{site_url}/booking"
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if "ru" in text_lower or "—Ä—É—Å" in text_lower:
                reply = f"–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ —Å—Å—ã–ª–∫–µ: {booking_url}\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –≤—Å—Ç—Ä–µ—á–∏."
            else:
                reply = f"–î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: {booking_url}\n\n–í–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∑—Ä—É—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å, –∞ —Ç–∞–∫–æ–∂ –≤–∫–∞–∑–∞—Ç–∏ —Ç–µ–º—É –∑—É—Å—Ç—Ä—ñ—á—ñ."
        
        # For all other queries, use the OpenAI assistant
        else:
            reply = ask_gpt(text)

        # Save dialogue history
        log_entry = {
            "timestamp": datetime.utcnow().isoformat(),
            "question": text,
            "answer": reply
        }
        dialogues.setdefault(client_id, []).append(log_entry)
        with open(DIALOGUES_FILE, "w", encoding="utf-8") as f:
            json.dump(dialogues, f, indent=2, ensure_ascii=False)

        speech = openai.audio.speech.create(
            model="tts-1",
            voice="nova",
            input=reply
        )

        response = app.response_class(
            response=speech.read(),
            mimetype="audio/mpeg"
        )
        response.headers["X-Assistant-Answer"] = quote(reply)
        response.headers["X-User-Text"] = quote(text)
        return response

    except Exception as e:
        print(f"[process_audio] Error: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/process_text", methods=["POST"])
def process_text():
    data = request.get_json()
    text = data.get("text", "")
    client_id = data.get("client_id", "unknown")
    if not text:
        return jsonify({"error": "–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç"}), 400

    # Check if the text contains product or calendar related keywords
    text_lower = text.lower()
    
    # Handle product-related queries directly
    if any(keyword in text_lower for keyword in ["—Ç–æ–≤–∞—Ä", "–ø—Ä–æ–¥—É–∫—Ç", "—Å–∫–ª–∞–¥", "—ñ–Ω–≤–µ–Ω—Ç–∞—Ä", "–Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]):
        try:
            if "—Å–ø–∏—Å–æ–∫" in text_lower or "–≤—Å—ñ" in text_lower:
                answer = list_all_products()
            else:
                # Try to extract product name
                import re
                product_match = re.search(r'(?:—Ç–æ–≤–∞—Ä|–ø—Ä–æ–¥—É–∫—Ç|–Ω–∞—è–≤–Ω—ñ—Å—Ç—å)\s+[""]?([^""]+)[""]?', text_lower)
                if product_match:
                    product_name = product_match.group(1).strip()
                    answer = get_product_info(product_name)
                else:
                    # If no specific product mentioned, list all products
                    answer = list_all_products()
        except Exception as e:
            print(f"Error handling product query: {e}")
            answer = f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –±–∞–∑–æ—é —Ç–æ–≤–∞—Ä—ñ–≤: {str(e)}"
    
    # Handle calendar-related queries directly
    elif any(keyword in text_lower for keyword in ["–∫–∞–ª–µ–Ω–¥–∞—Ä", "–∑–∞–ø–∏—Å", "–ø—Ä–∏–π–æ–º", "–≤—ñ–ª—å–Ω—ñ", "—Å–ª–æ—Ç–∏", "–≤—Å—Ç—Ä–µ—á–∞", "–≤—Å—Ç—Ä–µ—á—É", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"]):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é
        site_url = request.host_url.rstrip('/')
        booking_url = f"{site_url}/booking"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if "ru" in text_lower or "—Ä—É—Å" in text_lower:
            answer = f"–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ —Å—Å—ã–ª–∫–µ: {booking_url}\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –≤—Å—Ç—Ä–µ—á–∏."
        else:
            answer = f"–î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: {booking_url}\n\n–í–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∑—Ä—É—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å, –∞ —Ç–∞–∫–æ–∂ –≤–∫–∞–∑–∞—Ç–∏ —Ç–µ–º—É –∑—É—Å—Ç—Ä—ñ—á—ñ."
    
    # For all other queries, use the OpenAI assistant
    else:
        try:
            instruction_path = "storage/instructions.txt"
            assistant_instructions = "–¢–∏ ‚Äî –≤–≤—ñ—á–ª–∏–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ –π –∫–æ—Ä–µ–∫—Ç–Ω–æ."
            if os.path.exists(instruction_path):
                with open(instruction_path, "r", encoding="utf-8") as f:
                    assistant_instructions = f.read().strip()

            knowledge = search_knowledgebase(text)
            full_message = f"üìå –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:\n{assistant_instructions}\n\nüìö –ö–æ–Ω—Ç–µ–∫—Å—Ç —ñ–∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å:\n{knowledge}\n\nüó£Ô∏è –ü–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n{text}"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ask_gpt
            answer = ask_gpt(full_message)
        except Exception as e:
            print(f"Error in process_text: {e}")
            answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    # Log the conversation
    log_entry = {"timestamp": datetime.utcnow().isoformat(), "question": text, "answer": answer}
    dialogues.setdefault(client_id, []).append(log_entry)
    with open(DIALOGUES_FILE, "w", encoding="utf-8") as f:
        json.dump(dialogues, f, indent=2, ensure_ascii=False)

    return jsonify({"answer": answer})

@app.route("/clear_history", methods=["POST"])
@require_login
def clear_history():
    global dialogues
    dialogues = {}
    with open(DIALOGUES_FILE, "w", encoding="utf-8") as f:
        json.dump(dialogues, f, indent=2, ensure_ascii=False)
    return redirect(url_for("dashboard"))

@app.route("/tts", methods=["GET"])
def text_to_speech():
    try:
        text = request.args.get("text", "")
        if not text:
            return jsonify({"error": "–¢–µ–∫—Å—Ç –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}), 400

        speech = openai.audio.speech.create(
            model="tts-1",
            voice="nova",
            input=text
        )

        response = app.response_class(
            response=speech.read(),
            mimetype="audio/mpeg"
        )
        return response

    except Exception as e:
        print(f"[tts] Error: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/booking", methods=["GET", "POST"])
def booking():
    message = None
    if request.method == "POST":
        name = request.form.get("name")
        email = request.form.get("email")
        phone = request.form.get("phone", "")
        date = request.form.get("date")
        time = request.form.get("time")
        topic = request.form.get("topic")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        booking_data = {
            "title": f"–í—Å—Ç—Ä–µ—á–∞: {name}",
            "date": date,
            "time": time,
            "email": email,
            "phone": phone, 
            "topic": topic,
            "created_at": datetime.utcnow().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª booking.json
        booking_file = os.path.join("storage", "bookings.json")
        bookings = []
        if os.path.exists(booking_file):
            try:
                with open(booking_file, "r", encoding="utf-8") as f:
                    bookings = json.load(f)
            except json.JSONDecodeError:
                bookings = []
        
        bookings.append(booking_data)
        with open(booking_file, "w", encoding="utf-8") as f:
            json.dump(bookings, f, indent=2, ensure_ascii=False)
        
        message = "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏."
    
    return render_template("booking.html", message=message)

@app.route("/bookings")
@require_login
def view_bookings():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
    booking_file = os.path.join("storage", "bookings.json")
    bookings = []
    if os.path.exists(booking_file):
        try:
            with open(booking_file, "r", encoding="utf-8") as f:
                bookings = json.load(f)
        except json.JSONDecodeError:
            bookings = []
    
    return render_template("bookings.html", bookings=bookings)

@app.route("/delete_booking", methods=["POST"])
@require_login
def delete_booking():
    index = int(request.form.get("index", -1))
    if index >= 0:
        booking_file = os.path.join("storage", "bookings.json")
        if os.path.exists(booking_file):
            try:
                with open(booking_file, "r", encoding="utf-8") as f:
                    bookings = json.load(f)
                
                if 0 <= index < len(bookings):
                    del bookings[index]
                    
                    with open(booking_file, "w", encoding="utf-8") as f:
                        json.dump(bookings, f, indent=2, ensure_ascii=False)
            except Exception as e:
                print(f"Error deleting booking: {e}")
    
    return redirect(url_for("view_bookings"))

def ask_gpt(prompt):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        if hasattr(openai, "client") and openai.client:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–ª—é—á–µ–π –ø—Ä–æ–µ–∫—Ç–∞
            thread = openai.client.beta.threads.create()
            openai.client.beta.threads.messages.create(thread_id=thread.id, role="user", content=prompt)
            run = openai.client.beta.threads.runs.create(thread_id=thread.id, assistant_id=ASSISTANT_ID)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            while True:
                run_status = openai.client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
                if run_status.status == "completed":
                    break
                time.sleep(1)
            
            messages = openai.client.beta.threads.messages.list(thread_id=thread.id)
            return messages.data[0].content[0].text.value.strip()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–ª—é—á–µ–π
            thread = openai.beta.threads.create()
            openai.beta.threads.messages.create(thread_id=thread.id, role="user", content=prompt)
            run = openai.beta.threads.runs.create(thread_id=thread.id, assistant_id=ASSISTANT_ID)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            while True:
                run_status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
                if run_status.status == "completed":
                    break
                time.sleep(1)
            
            messages = openai.beta.threads.messages.list(thread_id=thread.id)
            return messages.data[0].content[0].text.value.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {str(e)}")
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)), debug=True)
