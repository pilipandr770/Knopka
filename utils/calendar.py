# utils/calendar.py

import json
import os
from pathlib import Path
from datetime import datetime, timedelta

# Use absolute path to ensure file is found regardless of working directory
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
CALENDAR_FILE = os.path.join(BASE_DIR, "storage", "calendar_events.json")

def create_calendar_event(title: str, start_time: str, end_time: str, email: str = None) -> str:
    try:
        start = datetime.fromisoformat(start_time)
        end = datetime.fromisoformat(end_time)
    except Exception as e:
        return f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: {e}"

    new_event = {
        "title": f"[–¢–ï–°–¢] {title}",
        "start": start.isoformat(),
        "end": end.isoformat(),
        "email": email
    }

    events = []
    if os.path.exists(CALENDAR_FILE):
        try:
            with open(CALENDAR_FILE, "r", encoding="utf-8") as f:
                events = json.load(f)
        except json.JSONDecodeError:
            # Handle case where file exists but is not valid JSON
            print(f"‚ö†Ô∏è Warning: Calendar file exists but is not valid JSON. Creating new file.")
            events = []

    events.append(new_event)
    with open(CALENDAR_FILE, "w", encoding="utf-8") as f:
        json.dump(events, f, indent=2, ensure_ascii=False)

    print(f"‚úÖ –ü–æ–¥—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {new_event}")
    return f"üìÖ –ü–æ–¥—ñ—è \"{title}\" —Å—Ç–≤–æ—Ä–µ–Ω–∞ —è–∫ —Ç–µ—Å—Ç–æ–≤–∞ –Ω–∞ {start_time} ‚Äì {end_time}."

def list_calendar_events() -> str:
    if not os.path.exists(CALENDAR_FILE):
        return "üì≠ –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π."

    try:
        with open(CALENDAR_FILE, "r", encoding="utf-8") as f:
            events = json.load(f)
    except json.JSONDecodeError:
        print(f"‚ö†Ô∏è Error: Could not parse calendar file as JSON")
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è."

    now = datetime.utcnow()
    upcoming = [
        e for e in events if datetime.fromisoformat(e["start"]) > now
    ]

    if not upcoming:
        return "‚úÖ –ù–∞—Ä–∞–∑—ñ –≤—Å—ñ —Å–ª–æ—Ç–∏ –≤—ñ–ª—å–Ω—ñ."

    result = "üìÖ –ù–∞–π–±–ª–∏–∂—á—ñ –ø–æ–¥—ñ—ó:\n"
    for e in upcoming[:5]:
        result += f"‚Ä¢ {e['start']} ‚Äì {e['end']} ({e['title']})\n"
    return result.strip()

def find_free_slots(duration_minutes=30, start_date=None, max_slots=3) -> str:
    now = datetime.utcnow()
    try:
        parsed = datetime.fromisoformat(start_date) if start_date else None
        start_time = parsed if parsed and parsed > now else now
    except:
        start_time = now

    end_of_day = start_time.replace(hour=23, minute=59)

    if not os.path.exists(CALENDAR_FILE):
        return "‚úÖ –í–µ—Å—å –¥–µ–Ω—å –≤—ñ–ª—å–Ω–∏–π!"

    try:
        with open(CALENDAR_FILE, "r", encoding="utf-8") as f:
            events = json.load(f)
    except json.JSONDecodeError:
        print(f"‚ö†Ô∏è Error: Could not parse calendar file as JSON")
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è."

    occupied = [
        (datetime.fromisoformat(e["start"]), datetime.fromisoformat(e["end"]))
        for e in events if datetime.fromisoformat(e["end"]) > now
    ]
    occupied.sort()

    free_slots = []
    current = start_time
    while current + timedelta(minutes=duration_minutes) <= end_of_day:
        conflict = False
        for start, end in occupied:
            if (start <= current < end) or (start < current + timedelta(minutes=duration_minutes) <= end):
                current = end
                conflict = True
                break
        if not conflict:
            slot_end = current + timedelta(minutes=duration_minutes)
            free_slots.append(f"{current.strftime('%Y-%m-%d %H:%M')} ‚Äì {slot_end.strftime('%H:%M')}")
            current = slot_end
        if len(free_slots) >= max_slots:
            break

    print("üß™ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏:")
    for s in free_slots:
        print("-", s)

    if not free_slots:
        return "‚ùå –°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤."

    return "üïì –í—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏:\n" + "\n".join(free_slots)
