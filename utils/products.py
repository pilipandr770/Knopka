# utils/products.py

import pandas as pd
import os

PRODUCTS_PATH = "storage/products.csv"

def get_product_info(product_name: str) -> str:
    if not os.path.exists(PRODUCTS_PATH):
        return "‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞."

    df = pd.read_csv(PRODUCTS_PATH)
    if "–Ω–∞–∑–≤–∞" not in df.columns:
        return "‚ö†Ô∏è –£ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –∫–æ–ª–æ–Ω–∫–∏ '–Ω–∞–∑–≤–∞'."

    match = df[df["–Ω–∞–∑–≤–∞"].str.lower() == product_name.lower()]
    if match.empty:
        return f"‚ùå –¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    row = match.iloc[0]
    return "\n".join([f"‚Ä¢ {col}: {row[col]}" for col in df.columns])

def add_product(–Ω–∞–∑–≤–∞: str, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: str = "", —Ü—ñ–Ω–∞: str = "", **kwargs) -> str:
    df = pd.read_csv(PRODUCTS_PATH) if os.path.exists(PRODUCTS_PATH) else pd.DataFrame(columns=["–Ω–∞–∑–≤–∞", "–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "—Ü—ñ–Ω–∞", "–Ω–∞ —Å–∫–ª–∞–¥—ñ"])
    if –Ω–∞–∑–≤–∞ in df["–Ω–∞–∑–≤–∞"].values:
        return f"‚ö†Ô∏è –¢–æ–≤–∞—Ä '{–Ω–∞–∑–≤–∞}' –≤–∂–µ —ñ—Å–Ω—É—î."

    new_row = {
        "–Ω–∞–∑–≤–∞": –Ω–∞–∑–≤–∞,
        "–∫–∞—Ç–µ–≥–æ—Ä—ñ—è": –∫–∞—Ç–µ–≥–æ—Ä—ñ—è,
        "—Ü—ñ–Ω–∞": —Ü—ñ–Ω–∞,
        "–Ω–∞ —Å–∫–ª–∞–¥—ñ": kwargs.get("–Ω–∞ —Å–∫–ª–∞–¥—ñ", "1")
    }
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    df.to_csv(PRODUCTS_PATH, index=False)
    return f"‚úÖ –¢–æ–≤–∞—Ä '{–Ω–∞–∑–≤–∞}' –¥–æ–¥–∞–Ω–æ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ (—è–∫ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å)."

def list_all_products() -> str:
    if not os.path.exists(PRODUCTS_PATH):
        return "‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞."

    df = pd.read_csv(PRODUCTS_PATH)
    if df.empty:
        return "üì¶ –¢–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è."

    result = "üßæ –£ –Ω–∞—Å —î —Ç–∞–∫—ñ —Ç–æ–≤–∞—Ä–∏:\n"
    for _, row in df.iterrows():
        result += f"- {row['–Ω–∞–∑–≤–∞']} ({row['–∫–∞—Ç–µ–≥–æ—Ä—ñ—è']}): {row['—Ü—ñ–Ω–∞']} –≥—Ä–Ω\n"
    return result.strip()
